name: Docker Spring Boot Deployment

on:
  push:
    branches: [ 'main' ]
    
env:
  ENVIRONMENT: production
  VERSION: 1.0.0
  APPLICATION_NAME: name
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DOCKER_REPO_PATH: ${{ secrets.DOCKER_USERNAME }}/
  
jobs:
  java-upload-artifact:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Java setup
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'
        
    - run: mvn -f ${{ env.APPLICATION_NAME }}/pom.xml versions:set -DnewVersion=${{ env.VERSION }}
    - run: mvn -f ${{ env.APPLICATION_NAME }}/pom.xml clean install
    - run: mkdir ${{ env.ENVIRONMENT }} && cp ${{ env.APPLICATION_NAME }}/target/*.jar ${{ env.ENVIRONMENT }}
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ env.APPLICATION_NAME }}-${{ env.VERSION }}
        path: ${{ env.ENVIRONMENT }}
      
  push-to-dockerhub:
    runs-on: ubuntu-latest
    needs: [java-upload-artifact]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - run: mkdir ${{ env.APPLICATION_NAME }}/target
    
    - name: Download backend jar artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.APPLICATION_NAME }}-${{ env.VERSION }}
        path: ${{ env.APPLICATION_NAME }}/target
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - run: docker build -t . ${{ env.APPLICATION_NAME }}-${{ env.VERSION }}
    - run: docker tag ${{ env.APPLICATION_NAME }}-${{ env.VERSION }} ${{ env.DOCKER_REPO_PATH }}${{ env.APPLICATION_NAME }}-${{ env.VERSION }}
    - run: docker push ${{ env.DOCKER_REPO_PATH }}${{ env.APPLICATION_NAME }}-${{ env.VERSION }}
        
  deploy:
    runs-on: ubuntu-latest
    needs: push-to-dockerhub
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Pull and run docker images in VM   
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST_IP }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        envs: ENVIRONMENT, VERSION, DB_USERNAME, DB_PASSWORD, DOCKER_REPO_PATH
        # NEED TO TEST THIS LATER
        script: |
          cd lock-pass
          sudo -E docker compose rm -v -s -f
          sudo docker images -aq | sudo xargs docker rmi -f || true
          sudo -E docker compose pull
          sudo -E docker compose up -d